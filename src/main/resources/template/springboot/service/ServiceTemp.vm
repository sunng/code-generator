package $packageName;

import com.github.pagehelper.PageRowBounds;
import org.springframework.stereotype.Service;
import tk.mybatis.mapper.entity.Example;

import javax.annotation.Resource;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;

@Service
public class $className {
    @Resource
    private ${table.tableNameClass}Repository ${table.tableNameVariable}Repository;

    public void create(Create${table.tableNameClass}RequestDto create${table.tableNameClass}RequestDto) {
        ${table.tableNameClass} ${table.tableNameVariable} = new ${table.tableNameClass}();
        //TODO to be impl
        ${table.tableNameVariable}Repository.insertSelective(${table.tableNameVariable});
    }

    public void update(Update${table.tableNameClass}RequestDto update${table.tableNameClass}RequestDto) {
        ${table.tableNameClass} ${table.tableNameVariable} = new ${table.tableNameClass}();
        //TODO to be impl
        ${table.tableNameVariable}Repository.updateByPrimaryKeySelective(${table.tableNameVariable});
    }

    public Get${table.tableNameClass}ResponseDto.DtoData queryById(int id) {
        ${table.tableNameClass} ${table.tableNameVariable} = ${table.tableNameVariable}Repository.selectByPrimaryKey(id);
        return ObjectConverter.convertObject2Bean(${table.tableNameVariable}, Get${table.tableNameClass}ResponseDto.DtoData.class);;
    }

    public List${table.tableNameClass}ResponseDto.DtoData list(List${table.tableNameClass}RequestDto list${table.tableNameClass}RequestDto) {

        Example example = new Example(${table.tableNameClass}.class);
        //TODO to be impl
        example.setOrderByClause(" create_time desc ");

        PageRowBounds pageRowBounds = new PageRowBounds(list${table.tableNameClass}RequestDto.getPageIndex(), Constant.PAGE_SIZE);
        List<${table.tableNameClass}> ${table.tableNameVariable}List = ${table.tableNameVariable}Repository.selectByExampleAndRowBounds(example, pageRowBounds);
        long pageCount = (pageRowBounds.getTotal() + Constant.PAGE_SIZE - 1) / Constant.PAGE_SIZE;
        List<List${table.tableNameClass}ResponseDto.Record> list = new ArrayList<>(${table.tableNameVariable}List.size());
        ${table.tableNameVariable}List.forEach(${table.tableNameVariable} -> list.add(ObjectConverter.convertObject2Bean(${table.tableNameVariable}, List${table.tableNameClass}ResponseDto.Record.class)));

        return new List${table.tableNameClass}ResponseDto.DtoData((int)pageCount, list);
    }
}